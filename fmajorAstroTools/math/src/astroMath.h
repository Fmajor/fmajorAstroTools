/* This file was automatically generated.  Do not edit! */
struct Vertex {
    double x;
    double y;
    struct Vertex *prev;
    struct Vertex *next;
    int flag;
};
struct Polygon {
    struct Vertex *P;
    int num;
};
struct Vector2 {
    double x;
    double y;
};
struct Vector3 {
    double x;
    double y;
    double z;
};
/* This file was automatically generated.  Do not edit! */
int fillHollowness(long *mask,int ny,int nx);
int interpolate1D(int innx,const double *inxx,const double *influx,const double *invar,long *inmask,double *inoutmask,double *inLx,double *inRx,int outnx,const double *outxx,double *outflux,double *outvar,double *outLx,double *outRx,double *outmask);
int get2map(int nx,const double *xx,const long *mask,double *Lx,double *Rx);
int interpolate2D(int innx,int inny,const double *inxx,const double *inyy,const double *influx,const double *invar,long *inmask,double *inoutmask,double *inULx,double *inULy,double *inURx,double *inURy,double *inLLx,double *inLLy,double *inLRx,double *inLRy,int outnx,int outny,const double *outxx,const double *outyy,double *outflux,double *outvar,double *outULx,double *outULy,double *outURx,double *outURy,double *outLLx,double *outLLy,double *outLRx,double *outLRy,double *outmask);
int searchsorted(int n,double *array,double value);
int get4map(int nx,int ny,const long *mask,const double *xx,const double *yy,double *ULx,double *ULy,double *URx,double *URy,double *LLx,double *LLy,double *LRx,double *LRy);
void get4map_backup(int nx,int ny,const long *mask,const double *xx,const double *yy,double *ULx,double *ULy,double *URx,double *URy,double *LLx,double *LLy,double *LRx,double *LRy);
void _use2y(int nx,int ny,int i,int j,double *thisx,double *thisy,int direction,double *ULx,double *ULy,double *URx,double *URy,double *LLx,double *LLy,double *LRx,double *LRy);
int _find2y(int nx,int ny,int i,int j,double *this,int direction);
void _use2x(int nx,int ny,int i,int j,double *thisx,double *thisy,int direction,double *ULx,double *ULy,double *URx,double *URy,double *LLx,double *LLy,double *LRx,double *LRy);
int _find2x(int nx,int ny,int i,int j,double *this,int direction);
void _use3(int nx,int ny,int i,int j,double *thisx,double *thisy,int direction,double *ULx,double *ULy,double *URx,double *URy,double *LLx,double *LLy,double *LRx,double *LRy);
int _find3(int nx,int ny,int i,int j,double *this,int direction);
void _copy(int nx,int ny,int i,int j,int direction,double *ULx,double *ULy,double *URx,double *URy,double *LLx,double *LLy,double *LRx,double *LRy);
void copyArray(int nx,int ny,double *from,double *to);
void areaTriangleSquare(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4,double Dx,double Dy,double Ex,double Ey,double Fx,double Fy,double *fullArea,double *overlapArea,double *squareArea);
double areaPolygon(struct Polygon *poly);
struct Polygon *TriangleSquarePolygon(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4,double Dx,double Dy,double Ex,double Ey,double Fx,double Fy);
struct Polygon *TriangleTrianglePolygon(double Ax,double Ay,double Bx,double By,double Cx,double Cy,double Dx,double Dy,double Ex,double Ey,double Fx,double Fy);
void CutPolygon(struct Polygon *poly,struct Vertex *D,struct Vertex *E,struct Vertex *F);
struct Vertex *intersect(struct Vertex *A,struct Vertex *B,struct Vertex *C,struct Vertex *D);
int showPolygon(struct Polygon *obj);
void freePolygon(struct Polygon *obj);
struct Vertex *delVertex(struct Polygon *obj,int index);
struct Vertex *addVertex(struct Polygon *obj,double x,double y,int flag,int index);
struct Vertex *newVertex(double x,double y,int flag);
struct Polygon *newPolygon();
void setValue2(struct Vector3 *v,double x,double y);
void setValue3(struct Vector3 *v,double x,double y,double z);
struct Vector3 *cross3(struct Vector3 *a,struct Vector3 *b);
struct Vector3 *neg3(struct Vector3 *v);
struct Vector3 *minus3(struct Vector3 *a,struct Vector3 *b);
struct Vector3 *plus3(struct Vector3 *a,struct Vector3 *b);
double norm3(struct Vector3 *v);
double dot3(struct Vector3 *a,struct Vector3 *b);
struct Vector3 *newVector3(double x,double y,double z);
double norm2(struct Vector2 *v);
struct Vector2 *neg2(struct Vector2 *v);
struct Vector2 *minus2(struct Vector2 *a,struct Vector2 *b);
struct Vector2 *plus2(struct Vector2 *a,struct Vector2 *b);
double dot2(struct Vector2 *a,struct Vector2 *b);
struct Vector2 *newVector2(double x,double y);
void yAx(const double y[],const double A[],const double x[],int N,int xOrder,int yOrder,double result[]);
void linearInterpWithError(double x[],double y[],double sigma[],int N,double xx[],double yy[],double sigmasigma[],int M);
void getLeftIndex(double x[],int N,double xx[],int indexs[],int M);
int sortedFindLeft(double thisx,int start,double x[],int N);
void iterstat3d(double data[],int c,int b,int M,double invvar[],double lsigrej,double hsigrej,int maxiter,short initmask[],short badmask[],short newBadMask[],short stdRej,short useMedian,int maxRej,double maxDev,double result[]);
int iterstat1dCycle(const double data[],int M,const double invvar[],double lsigrej,double hsigrej,int maxiter,short const initmask[],short badmask[],short newBadMask[],short stdRej,short useMedian,int maxRej,double maxDev,double result[],double *badness,double *diff,short *goodmask,int *newBadIndex,double *newBadValue,int *auxIndex,int *newBadValueIndexTodo);
int iterstat1d(const double data[],int M,const double invvar[],double lsigrej,double hsigrej,int maxiter,short const initmask[],short badmask[],short newBadMask[],short stdRej,short useMedian,int maxRej,double maxDev,double result[]);
double maskMedian(const double *data,short *mask,double *tempdata,int N,int masktype);
void doubleIndexSort(const double a[],int n,int indexArray[]);
int compareDoubleIndexArray(const void *a,const void *b);
void shortNot(const short A[],short B[],int n);
int shortSum(const short A[],int n);
double doubleSub(const double A[],const double B[],double C[],int n);
double doubleSum(const double A[],int n);
int doubleMax(const double A[],int n,double *result);
int doubleMin(const double A[],int n,double *result);
double percentile(double A[],int n,double p);
double median(double A[],int n);
double randomized_select(double A[],int p,int r,int i);
int partition(double A[],int p,int r);
int partition(double A[],int p,int r);
int randomInt(int p,int r);
int randomInt(int p,int r);
int randomized_partition(double A[],int p,int r);
int randomized_partition(double A[],int p,int r);
